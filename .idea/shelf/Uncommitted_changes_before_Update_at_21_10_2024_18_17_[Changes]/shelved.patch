Index: src/main/kotlin/pt/iscte/pesca/Question.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.iscte.pt.iscte.pesca\r\n\r\nimport java.io.File\r\n\r\ninterface QuestionType{\r\n    var languageToOptionMapping : Map<String,String>\r\n\r\n    fun getText()=languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n    fun getText(language: String):String{\r\n        if (!languageToOptionMapping.containsKey(language)){\r\n            return languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n        }\r\n        return languageToOptionMapping[language].toString()\r\n\r\n    }\r\n\r\n}\r\n\r\ndata class SimpleTextStatement(\r\n    override var languageToOptionMapping: Map<String,String>\r\n): QuestionType {\r\n    constructor(value: Any): this(mutableMapOf(DEFAULT_LANGUAGE to value.toString()) )\r\n\r\n    override fun toString() = languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n}\r\n\r\n\r\ninterface OptionData{\r\n    var languageToOptionMapping : Map<String,String>\r\n\r\n    fun getText(language: String): String {\r\n        if (!languageToOptionMapping.containsKey(language)){\r\n            return languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n        }\r\n        return languageToOptionMapping[language].toString()\r\n    }\r\n    fun getText() = languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n}\r\n\r\ndata class SimpleTextOptionData(\r\n    override var languageToOptionMapping: Map<String, String>\r\n): OptionData {\r\n    constructor(value: Any): this(mutableMapOf(DEFAULT_LANGUAGE to value.toString()) )\r\n\r\n    override fun toString() = languageToOptionMapping[DEFAULT_LANGUAGE].toString()\r\n\r\n}\r\n\r\n\r\n\r\ndata class QuestionData(\r\n    val statement: QuestionType,\r\n    private val options: Map<OptionData, Boolean>,\r\n    val language: String = DEFAULT_LANGUAGE,\r\n) {\r\n    private val shuffledOptions: Map<OptionData, Boolean>\r\n        get() {\r\n            val shuffled = options.keys.filter { option -> !(LAST_UNSHUFFLED_OPTIONS.contains(option)) }.shuffled().associateWith {\r\n                option -> options[option]!!\r\n            }.toMutableMap()\r\n            LAST_UNSHUFFLED_OPTIONS.forEach { lastOption ->\r\n                if (options.containsKey(lastOption))\r\n                    shuffled[lastOption] = options[lastOption]!!\r\n            }\r\n            return shuffled\r\n        }\r\n\r\n    init {\r\n        require(options.size >= 2) { \"Question must have at least two options!\" }\r\n        require(options.any { option -> option.value }) { \"Question must have at least one correct option!\" }\r\n    }\r\n\r\n    override fun toString(): String = \"${statement.getText(language)}\\n${shuffledOptions.toList().joinToString(System.lineSeparator()) { \r\n        option -> \"[${if (option.second) \"x\" else \" \"}] ${option.first.getText(language)}\"\r\n    }}\"\r\n}\r\n\r\nsealed interface Question {\r\n    /**\r\n     * Builds the question from the source code.\r\n     * @param source Source code of a Java class.\r\n     */\r\n    fun build(source: String, language: String = DEFAULT_LANGUAGE): QuestionData\r\n\r\n    /**\r\n     * Builds the question from a Java source code file.\r\n     * @param file A Java source code file.\r\n     */\r\n    fun build(file: File, language: String = DEFAULT_LANGUAGE): QuestionData = build(file.readText(), language)\r\n\r\n    fun buildPT(source: String): QuestionData = build(source, PORTUGUESE_LANGUAGE)\r\n\r\n    fun buildEN(source: String): QuestionData = build(source, ENGLISH_LANGUAGE)\r\n\r\n    fun buildPT(file: File): QuestionData = build(file.readText(), PORTUGUESE_LANGUAGE)\r\n\r\n    fun buildEN(file: File): QuestionData = build(file.readText(), ENGLISH_LANGUAGE)\r\n\r\n}\r\n\r\ninterface StaticQuestion : Question\r\n\r\ninterface DynamicQuestion : Question\r\n\r\n
===================================================================
diff --git a/src/main/kotlin/pt/iscte/pesca/Question.kt b/src/main/kotlin/pt/iscte/pesca/Question.kt
--- a/src/main/kotlin/pt/iscte/pesca/Question.kt	(revision eebdef30864fbe5f5f99d997a3d404aa79208a5c)
+++ b/src/main/kotlin/pt/iscte/pesca/Question.kt	(date 1729100322698)
@@ -11,7 +11,6 @@
             return languageToOptionMapping[DEFAULT_LANGUAGE].toString()
         }
         return languageToOptionMapping[language].toString()
-
     }
 
 }
Index: src/main/kotlin/pt/iscte/pesca/DynamicQuestions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.iscte.pt.iscte.pesca\r\n\r\n
===================================================================
diff --git a/src/main/kotlin/pt/iscte/pesca/DynamicQuestions.kt b/src/main/kotlin/pt/iscte/pesca/DynamicQuestions.kt
--- a/src/main/kotlin/pt/iscte/pesca/DynamicQuestions.kt	(revision eebdef30864fbe5f5f99d997a3d404aa79208a5c)
+++ b/src/main/kotlin/pt/iscte/pesca/DynamicQuestions.kt	(date 1729101554116)
@@ -1,2 +1,43 @@
 package pt.iscte.pt.iscte.pesca
 
+import pt.iscte.strudel.parsing.java.Java2Strudel
+import pt.iscte.strudel.vm.IValue
+import pt.iscte.strudel.vm.IVirtualMachine
+
+data class WhatsTheReturnedIntValue(val methodName: String, val args: List<Any>) : DynamicQuestion {
+
+    override fun build(source: String, language: String): QuestionData {
+
+        val method = getMethod(methodName = methodName, source = source)
+
+        val signature = "${method.nameAsString}(${method.parameters.joinToString()})"
+
+        if (!isMethodReturningObject(method)) {
+            throw Exception()
+        }
+        if (!canCallJavaMethodWithArgs(method,args)){
+            throw Exception()
+        }
+
+        val methodStrudel = Java2Strudel().load(source)[methodName]
+
+        val vm: IVirtualMachine = IVirtualMachine.create()
+
+        val e: IValue = vm.getValue(23)
+
+        val result: IValue? = vm.execute(methodStrudel, e)
+
+        val options = mutableMapOf<OptionData,Boolean>(SimpleTextOptionData(result.toString()) to true, NONE_OF_THE_ABOVE_OPTION to false)
+
+        return QuestionData(
+            SimpleTextStatement(
+                mutableMapOf(
+                    ENGLISH_LANGUAGE to "What is the return type of the function $signature?",
+                    PORTUGUESE_LANGUAGE to "Qual o tipo devolvido pela função $signature?"
+                )
+            ),
+            options,
+            language = language
+        )
+    }
+}
\ No newline at end of file
