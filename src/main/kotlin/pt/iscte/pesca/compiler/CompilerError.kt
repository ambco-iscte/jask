package pt.iscte.pesca.compiler

import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.stmt.ReturnStmt
import pt.iscte.strudel.parsing.java.extensions.nestedTypes
import java.io.File
import javax.tools.Diagnostic
import javax.tools.JavaFileObject

/**
 * I stole this from the Javac implementation. :)
 * Let's not use it for now, but I might explore something later
 */
@Suppress("UNUSED")
enum class JavacErrorType(val code: String) {
    AbstractCannotBeAccessedDirectly("abstract.cant.be.accessed.directly"),
    AbstractCannotBeInstantiated("abstract.cant.be.instantiated"),
    AddExportsWithRelease("add.exports.with.release"),
    AddReadsWithRelease("add.reads.with.release"),
    AlreadyAnnotated("already.annotated"),
    AlreadyDefined("already.defined"),
    AlreadyDefinedInClinit("already.defined.in.clinit"),
    AlreadyDefinedSingleImport("already.defined.single.import"),
    AlreadyDefinedStaticSingleImport("already.defined.static.single.import"),
    AlreadyDefinedThisUnit("already.defined.this.unit"),
    AnnotationMissingDefaultValue("annotation.missing.default.value"),
    AnnotationMissingDefaultValue1("annotation.missing.default.value.1"),
    AnnotationNotValidForType("annotation.not.valid.for.type"),
    AnnotationTypeNotApplicableToType("annotation.type.not.applicable.to.type"),
    AnonymousDiamondMethodDoesNotOverrideSuperclass("anonymous.diamond.method.does.not.override.superclass"),
    ArrayAndVarargs("array.and.varargs"),
    ArrayReqButFound("array.req.but.found"),
    BadFunctionalIntfAnno1("bad.functional.intf.anno.1"),
    BadInitializer("bad.initializer"),
    BadNameForOption("bad.name.for.option"),
    BadValueForOption("bad.value.for.option"),
    CallMustBeFirstStatementInConstructor("call.must.be.first.stmt.in.ctor"),
    CallToSuperNotAllowedInEnumConstructor("call.to.super.not.allowed.in.enum.ctor"),
    CannotGenerateClass("cannot.generate.class"),
    CannotAccess("cant.access"),
    CannotApplyDiamond("cant.apply.diamond"),
    CannotApplyDiamond1("cant.apply.diamond.1"),
    CannotApplySymbol("cant.apply.symbol"),
    CannotApplySymbols("cant.apply.symbols"),
    CannotAssignValueToFinalVariable("cant.assign.val.to.final.var"),
    CannotDereference("cant.deref"),
    CannotInferLocalVariableType("cant.infer.local.var.type"),
    CannotInheritDiffArg("cant.inherit.diff.arg"),
    CannotInheritFromFinal("cant.inherit.from.final"),
    CannotInheritFromSealed("cant.inherit.from.sealed"),
    CannotReferenceBeforeConstructorCalled("cant.ref.before.ctor.called"),
    CannotRefNonEffectivelyFinalVariable("cant.ref.non.effectively.final.var"),
    CannotResolve("cant.resolve"),
    CannotResolveArgs("cant.resolve.args"),
    CannotResolveArgsParams("cant.resolve.args.params"),
    CannotResolveLocation("cant.resolve.location"),
    CannotResolveLocationArgs("cant.resolve.location.args"),
    CannotResolveLocationArgsParams("cant.resolve.location.args.params"),
    CannotTypeAnnotateScoping("cant.type.annotate.scoping"),
    CannotTypeAnnotateScoping1("cant.type.annotate.scoping.1"),
    ClashWithPackageOfSameName("clash.with.pkg.of.same.name"),
    ClassCannotWrite("class.cant.write"),
    ClassInModuleCannotExtendSealedInDifferentModule("class.in.module.cant.extend.sealed.in.diff.module"),
    ClassInUnnamedModuleCannotExtendSealedInDifferentPackage("class.in.unnamed.module.cant.extend.sealed.in.diff.package"),
    ClassPublicShouldBeInFile("class.public.should.be.in.file"),
    ConcreteInheritanceConflict("concrete.inheritance.conflict"),
    ConflictingExports("conflicting.exports"),
    ConflictingExportsToModule("conflicting.exports.to.module"),
    ConflictingOpens("conflicting.opens"),
    ConflictingOpensToModule("conflicting.opens.to.module"),
    ConstantLabelNotCompatible("constant.label.not.compatible"),
    CyclicAnnotationElement("cyclic.annotation.element"),
    CyclicInheritance("cyclic.inheritance"),
    CyclicRequires("cyclic.requires"),
    DefaultOverridesObjectMember("default.overrides.object.member"),
    DoesNotOverrideAbstract("does.not.override.abstract"),
    DoesNotExist("doesnt.exist"),
    DuplicateAnnotationInvalidRepeated("duplicate.annotation.invalid.repeated"),
    DuplicateAnnotationMemberValue("duplicate.annotation.member.value"),
    DuplicateAnnotationMissingContainer("duplicate.annotation.missing.container"),
    DuplicateClass("duplicate.class"),
    DuplicateModule("duplicate.module"),
    DuplicateModuleOnPath("duplicate.module.on.path"),
    DuplicateProvides("duplicate.provides"),
    DuplicateRequires("duplicate.requires"),
    DuplicateUses("duplicate.uses"),
    EnclClassRequired("encl.class.required"),
    ErrorReadingFile("error.reading.file"),
    ErrorWritingFile("error.writing.file"),
    ExceptAlreadyCaught("except.already.caught"),
    ExceptNeverThrownInTry("except.never.thrown.in.try"),
    Expected("expected"),
    ExpectedStr("expected.str"),
    Expected2("expected2"),
    Expected3("expected3"),
    Expected4("expected4"),
    FeatureNotSupportedInSource("feature.not.supported.in.source"),
    FeatureNotSupportedInSourcePlural("feature.not.supported.in.source.plural"),
    FileNotDirectory("file.not.directory"),
    FileNotFile("file.not.file"),
    FileNotFound("file.not.found"),
    FilePatchedAndMsp("file.patched.and.msp"),
    FinalParameterMayNotBeAssigned("final.parameter.may.not.be.assigned"),
    FirstStatementMustBeCallToAnotherConstructor("first.statement.must.be.call.to.another.constructor"),
    ForeachNotApplicableToType("foreach.not.applicable.to.type"),
    IclsCantHaveStaticDecl("icls.cant.have.static.decl"),
    IllegalArgumentForOption("illegal.argument.for.option"),
    IllegalChar("illegal.char"),
    IllegalCharForEncoding("illegal.char.for.encoding"),
    IllegalCombinationOfModifiers("illegal.combination.of.modifiers"),
    IllegalDefaultSuperCall("illegal.default.super.call"),
    IllegalInitializerForType("illegal.initializer.for.type"),
    IllegalQualNotIcls("illegal.qual.not.icls"),
    IllegalRecordComponentName("illegal.record.component.name"),
    IllegalReferenceToRestrictedType("illegal.ref.to.restricted.type"),
    IllegalStaticIntfMethCall("illegal.static.intf.meth.call"),
    ImportRequiresCanonical("import.requires.canonical"),
    IncomparableTypes("incomparable.types"),
    IncompatibleThrownTypesInMref("incompatible.thrown.types.in.mref"),
    IncorrectConstructorReceiverName("incorrect.constructor.receiver.name"),
    IncorrectConstructorReceiverType("incorrect.constructor.receiver.type"),
    IncorrectReceiverName("incorrect.receiver.name"),
    IncorrectReceiverType("incorrect.receiver.type"),
    InstanceofPatternNoSubtype("instanceof.pattern.no.subtype"),
    InstanceOfReifiableNotSafe("instanceof.reifiable.not.safe"),
    IntNumberTooLarge("int.number.too.large"),
    IntfAnnotationCantHaveTypeParams("intf.annotation.cant.have.type.params"),
    IntfAnnotationMemberClash("intf.annotation.member.clash"),
    InvalidAKey("invalid.A.key"),
    InvalidAccessorMethodInRecord("invalid.accessor.method.in.record"),
    InvalidCanonicalConstructorInRecord("invalid.canonical.constructor.in.record"),
    InvalidFlag("invalid.flag"),
    InvalidLambdaParameterDeclaration("invalid.lambda.parameter.declaration"),
    InvalidModuleSpecifier("invalid.module.specifier"),
    InvalidMref("invalid.mref"),
    InvalidPath("invalid.path"),
    InvalidPermitsClause("invalid.permits.clause"),
    InvalidProfile("invalid.profile"),
    InvalidRepeatableAnnotation("invalid.repeatable.annotation"),
    InvalidRepeatableAnnotationElemNondefault("invalid.repeatable.annotation.elem.nondefault"),
    InvalidRepeatableAnnotationIncompatibleTarget("invalid.repeatable.annotation.incompatible.target"),
    InvalidRepeatableAnnotationInvalidValue("invalid.repeatable.annotation.invalid.value"),
    InvalidRepeatableAnnotationMultipleValues("invalid.repeatable.annotation.multiple.values"),
    InvalidRepeatableAnnotationNoValue("invalid.repeatable.annotation.no.value"),
    InvalidRepeatableAnnotationNotApplicable("invalid.repeatable.annotation.not.applicable"),
    InvalidRepeatableAnnotationNotApplicableInContext("invalid.repeatable.annotation.not.applicable.in.context"),
    InvalidRepeatableAnnotationNotDocumented("invalid.repeatable.annotation.not.documented"),
    InvalidRepeatableAnnotationNotInherited("invalid.repeatable.annotation.not.inherited"),
    InvalidRepeatableAnnotationRepeatedAndContainerPresent("invalid.repeatable.annotation.repeated.and.container.present"),
    InvalidRepeatableAnnotationRetention("invalid.repeatable.annotation.retention"),
    InvalidRepeatableAnnotationValueReturn("invalid.repeatable.annotation.value.return"),
    InvalidSource("invalid.source"),
    InvalidSupertypeRecord("invalid.supertype.record"),
    InvalidTarget("invalid.target"),
    IsPreview("is.preview"),
    LabelAlreadyInUse("label.already.in.use"),
    LimitStringOverflow("limit.string.overflow"),
    LocalClassesCantExtendSealed("local.classes.cant.extend.sealed"),
    LocalVarAccessedFromIclsNeedsFinal("local.var.accessed.from.icls.needs.final"),
    LocnBadModuleInfo("locn.bad.module-info"),
    LocnCantGetModuleNameForJar("locn.cant.get.module.name.for.jar"),
    LocnCantReadDirectory("locn.cant.read.directory"),
    LocnCantReadFile("locn.cant.read.file"),
    LocnInvalidArgForXpatch("locn.invalid.arg.for.xpatch"),
    LocnModuleInfoNotAllowedOnPatchPath("locn.module-info.not.allowed.on.patch.path"),
    ModNotAllowedHere("mod.not.allowed.here"),
    ModifierNotAllowedHere("modifier.not.allowed.here"),
    ModuleNameMismatch("module.name.mismatch"),
    ModuleNonZeroOpens("module.non.zero.opens"),
    ModuleNotFound("module.not.found"),
    ModuleNotFoundInModuleSourcePath("module.not.found.in.module.source.path"),
    MultiModuleOutdirCannotBeExplodedModule("multi-module.outdir.cannot.be.exploded.module"),
    MulticatchParameterMayNotBeAssigned("multicatch.parameter.may.not.be.assigned"),
    MulticatchTypesMustBeDisjoint("multicatch.types.must.be.disjoint"),
    NameClashSameErasure("name.clash.same.erasure"),
    NameClashSameErasureNoHide("name.clash.same.erasure.no.hide"),
    NameClashSameErasureNoOverride("name.clash.same.erasure.no.override"),
    NameClashSameErasureNoOverride1("name.clash.same.erasure.no.override.1"),
    NoAnnotationMember("no.annotation.member"),
    NoEnclInstanceOfTypeInScope("no.encl.instance.of.type.in.scope"),
    NoSuperclass("no.superclass"),
    NoValueForOption("no.value.for.option"),
    NoZipfsForArchive("no.zipfs.for.archive"),
    NonStaticCantBeRef("non-static.cant.be.ref"),
    NonSealedWithNoSealedSupertype("non.sealed.with.no.sealed.supertype"),
    NotAnnotationType("not.annotation.type"),
    NotDefAccessClassIntfCantAccess("not.def.access.class.intf.cant.access"),
    NotDefAccessClassIntfCantAccessReason("not.def.access.class.intf.cant.access.reason"),
    NotDefAccessPackageCantAccess("not.def.access.package.cant.access"),
    NotDefPublic("not.def.public"),
    NotDefPublicCantAccess("not.def.public.cant.access"),
    NotEnclClass("not.encl.class"),
    NotInProfile("not.in.profile"),
    NotLoopLabel("not.loop.label"),
    NotWithinBounds("not.within.bounds"),
    OperatorCantBeApplied("operator.cant.be.applied"),
    OperatorCantBeApplied1("operator.cant.be.applied.1"),
    OptionNotAllowedWithTarget("option.not.allowed.with.target"),
    OptionRemovedSource("option.removed.source"),
    OptionRemovedTarget("option.removed.target"),
    OptionTooMany("option.too.many"),
    Orphaned("orphaned"),
    OverrideIncompatibleRet("override.incompatible.ret"),
    OverrideMeth("override.meth"),
    OverrideMethDoesntThrow("override.meth.doesnt.throw"),
    OverrideStatic("override.static"),
    OverrideWeakerAccess("override.weaker.access"),
    PackageClashFromRequires("package.clash.from.requires"),
    PackageClashFromRequiresInUnnamed("package.clash.from.requires.in.unnamed"),
    PackageEmptyOrNotFound("package.empty.or.not.found"),
    PackageInOtherModule("package.in.other.module"),
    PackageNotVisible("package.not.visible"),
    PkgClashesWithClassOfSameName("pkg.clashes.with.class.of.same.name"),
    PluginNotFound("plugin.not.found"),
    PreviewFeatureDisabled("preview.feature.disabled"),
    PreviewFeatureDisabledClassfile("preview.feature.disabled.classfile"),
    PreviewFeatureDisabledPlural("preview.feature.disabled.plural"),
    PreviewNotLatest("preview.not.latest"),
    ProbFoundReq("prob.found.req"),
    ProcBadConfigFile("proc.bad.config.file"),
    ProcCantAccess("proc.cant.access"),
    ProcCantAccess1("proc.cant.access.1"),
    ProcCantFindClass("proc.cant.find.class"),
    ProcCantLoadClass("proc.cant.load.class"),
    ProcMessager("proc.messager"),
    ProcNoExplicitAnnotationProcessingRequested("proc.no.explicit.annotation.processing.requested"),
    ProcProcessorBadOptionName("proc.processor.bad.option.name"),
    ProcProcessorCantInstantiate("proc.processor.cant.instantiate"),
    ProcProcessorNotFound("proc.processor.not.found"),
    ProcProcessorWrongType("proc.processor.wrong.type"),
    QualifiedNewOfStaticClass("qualified.new.of.static.class"),
    RefAmbiguous("ref.ambiguous"),
    ReleaseBootclasspathConflict("release.bootclasspath.conflict"),
    RepeatedProvidesForService("repeated.provides.for.service"),
    RepeatedValueForModuleSourcePath("repeated.value.for.module.source.path"),
    RepeatedValueForPatchModule("repeated.value.for.patch.module"),
    ReportAccess("report.access"),
    ReqArg("req.arg"),
    RestrictedTypeNotAllowed("restricted.type.not.allowed"),
    RestrictedTypeNotAllowedArray("restricted.type.not.allowed.array"),
    RestrictedTypeNotAllowedCompound("restricted.type.not.allowed.compound"),
    RestrictedTypeNotAllowedHere("restricted.type.not.allowed.here"),
    SameBinaryName("same.binary.name"),
    ServiceDefinitionIsEnum("service.definition.is.enum"),
    ServiceImplementationDoesntHaveANoArgsConstructor("service.implementation.doesnt.have.a.no.args.constructor"),
    ServiceImplementationIsAbstract("service.implementation.is.abstract"),
    ServiceImplementationIsInner("service.implementation.is.inner"),
    ServiceImplementationNoArgsConstructorNotPublic("service.implementation.no.args.constructor.not.public"),
    ServiceImplementationNotInRightModule("service.implementation.not.in.right.module"),
    SourceCantOverwriteInputFile("source.cant.overwrite.input.file"),
    StackSimError("stack.sim.error"),
    TooManyPatchedModules("too.many.patched.modules"),
    TryResourceMayNotBeAssigned("try.resource.may.not.be.assigned"),
    TryWithResourcesExprEffectivelyFinalVar("try.with.resources.expr.effectively.final.var"),
    TwoClassLoaders2("two.class.loaders.2"),
    TypeDoesntTakeParams("type.doesnt.take.params"),
    TypeFoundReq("type.found.req"),
    TypesIncompatible("types.incompatible"),
    UndefLabel("undef.label"),
    UnexpectedType("unexpected.type"),
    UnmatchedQuote("unmatched.quote"),
    UnreportedExceptionDefaultConstructor("unreported.exception.default.constructor"),
    UnreportedExceptionImplicitClose("unreported.exception.implicit.close"),
    UnreportedExceptionNeedToCatchOrThrow("unreported.exception.need.to.catch.or.throw"),
    UnsupportedEncoding("unsupported.encoding"),
    UnsupportedReleaseVersion("unsupported.release.version"),
    VarMightAlreadyBeAssigned("var.might.already.be.assigned"),
    VarMightBeAssignedInLoop("var.might.be.assigned.in.loop"),
    VarMightNotHaveBeenInitialized("var.might.not.have.been.initialized"),
    VarNotInitializedInDefaultConstructor("var.not.initialized.in.default.constructor"),
    VarargsInvalidTrustmeAnno("varargs.invalid.trustme.anno"),
    WrongNumberTypeArgs("wrong.number.type.args"),
    AbstractMethCantHaveBody("abstract.meth.cant.have.body"),
    AddmodsAllModulePathInvalid("addmods.all.module.path.invalid"),
    AnnotationDeclNotAllowedHere("annotation.decl.not.allowed.here"),
    AnnotationTypeNotApplicable("annotation.type.not.applicable"),
    AnnotationValueMustBeAnnotation("annotation.value.must.be.annotation"),
    AnnotationValueMustBeClassLiteral("annotation.value.must.be.class.literal"),
    AnnotationValueMustBeNameValue("annotation.value.must.be.name.value"),
    AnnotationValueNotAllowableType("annotation.value.not.allowable.type"),
    AnonClassImplIntfNoArgs("anon.class.impl.intf.no.args"),
    AnonClassImplIntfNoQualForNew("anon.class.impl.intf.no.qual.for.new"),
    AnonClassImplIntfNoTypeargs("anon.class.impl.intf.no.typeargs"),
    ArrayAndReceiver("array.and.receiver"),
    ArrayDimensionMissing("array.dimension.missing"),
    AssertAsIdentifier("assert.as.identifier"),
    AttributeValueMustBeConstant("attribute.value.must.be.constant"),
    BadFunctionalIntfAnno("bad.functional.intf.anno"),
    BreakOutsideSwitchExpression("break.outside.switch.expression"),
    BreakOutsideSwitchLoop("break.outside.switch.loop"),
    CannotCreateArrayWithDiamond("cannot.create.array.with.diamond"),
    CannotCreateArrayWithTypeArguments("cannot.create.array.with.type.arguments"),
    CantAssignValToThis("cant.assign.val.to.this"),
    CantExtendIntfAnnotation("cant.extend.intf.annotation"),
    CantInheritFromAnon("cant.inherit.from.anon"),
    CantReadFile("cant.read.file"),
    CantSelectStaticClassFromParamType("cant.select.static.class.from.param.type"),
    CatchWithoutTry("catch.without.try"),
    ClassNotAllowed("class.not.allowed"),
    ConstExprReq("const.expr.req"),
    ContOutsideLoop("cont.outside.loop"),
    ContinueOutsideSwitchExpression("continue.outside.switch.expression"),
    DcBadEntity("dc.bad.entity"),
    DcBadInlineTag("dc.bad.inline.tag"),
    DcGtExpected("dc.gt.expected"),
    DcIdentifierExpected("dc.identifier.expected"),
    DcMalformedHtml("dc.malformed.html"),
    DcMissingSemicolon("dc.missing.semicolon"),
    DcNoContent("dc.no.content"),
    DcNoTagName("dc.no.tag.name"),
    DcRefAnnotationsNotAllowed("dc.ref.annotations.not.allowed"),
    DcRefBadParens("dc.ref.bad.parens"),
    DcRefSyntaxError("dc.ref.syntax.error"),
    DcRefUnexpectedInput("dc.ref.unexpected.input"),
    DcUnexpectedContent("dc.unexpected.content"),
    DcUnterminatedInlineTag("dc.unterminated.inline.tag"),
    DcUnterminatedSignature("dc.unterminated.signature"),
    DcUnterminatedString("dc.unterminated.string"),
    DefaultAllowedInIntfAnnotationMember("default.allowed.in.intf.annotation.member"),
    DotClassExpected("dot.class.expected"),
    DuplicateCaseLabel("duplicate.case.label"),
    DuplicateDefaultLabel("duplicate.default.label"),
    DuplicateTotalPattern("duplicate.total.pattern"),
    ElseWithoutIf("else.without.if"),
    EmptyAArgument("empty.A.argument"),
    EmptyCharLit("empty.char.lit"),
    EnumAnnotationMustBeEnumConstant("enum.annotation.must.be.enum.constant"),
    EnumAsIdentifier("enum.as.identifier"),
    EnumCantBeInstantiated("enum.cant.be.instantiated"),
    EnumConstantExpected("enum.constant.expected"),
    EnumConstantNotExpected("enum.constant.not.expected"),
    EnumLabelMustBeUnqualifiedEnum("enum.label.must.be.unqualified.enum"),
    EnumNoFinalize("enum.no.finalize"),
    EnumNoSubclassing("enum.no.subclassing"),
    EnumTypesNotExtensible("enum.types.not.extensible"),
    Error("error"),
    ExpectedModule("expected.module"),
    ExpectedModuleOrOpen("expected.module.or.open"),
    ExpressionNotAllowableAsAnnotationValue("expression.not.allowable.as.annotation.value"),
    FileSbOnSourceOrPatchPathForModule("file.sb.on.source.or.patch.path.for.module"),
    FinallyWithoutTry("finally.without.try"),
    FlowsThroughFromPattern("flows.through.from.pattern"),
    FlowsThroughToPattern("flows.through.to.pattern"),
    FpNumberTooLarge("fp.number.too.large"),
    FpNumberTooSmall("fp.number.too.small"),
    GenericArrayCreation("generic.array.creation"),
    GenericThrowable("generic.throwable"),
    IllegalArrayCreationBothDimensionAndInitialization("illegal.array.creation.both.dimension.and.initialization"),
    IllegalDot("illegal.dot"),
    IllegalEnumStaticRef("illegal.enum.static.ref"),
    IllegalEscChar("illegal.esc.char"),
    IllegalForwardRef("illegal.forward.ref"),
    IllegalLineEndInCharLit("illegal.line.end.in.char.lit"),
    IllegalNonasciiDigit("illegal.nonascii.digit"),
    IllegalParenthesizedExpression("illegal.parenthesized.expression"),
    IllegalSelfRef("illegal.self.ref"),
    IllegalStartOfExpr("illegal.start.of.expr"),
    IllegalStartOfStmt("illegal.start.of.stmt"),
    IllegalStartOfType("illegal.start.of.type"),
    IllegalTextBlockOpen("illegal.text.block.open"),
    IllegalUnderscore("illegal.underscore"),
    IllegalUnicodeEsc("illegal.unicode.esc"),
    ImproperlyFormedTypeInnerRawParam("improperly.formed.type.inner.raw.param"),
    ImproperlyFormedTypeParamMissing("improperly.formed.type.param.missing"),
    InitializerMustBeAbleToCompleteNormally("initializer.must.be.able.to.complete.normally"),
    InitializerNotAllowed("initializer.not.allowed"),
    InstanceInitializerNotAllowedInRecords("instance.initializer.not.allowed.in.records"),
    IntfAnnotationMembersCantHaveParams("intf.annotation.members.cant.have.params"),
    IntfAnnotationMembersCantHaveTypeParams("intf.annotation.members.cant.have.type.params"),
    IntfExpectedHere("intf.expected.here"),
    IntfMethCantHaveBody("intf.meth.cant.have.body"),
    IntfNotAllowedHere("intf.not.allowed.here"),
    InvalidAnnotationMemberType("invalid.annotation.member.type"),
    InvalidBinaryNumber("invalid.binary.number"),
    InvalidHexNumber("invalid.hex.number"),
    InvalidMethDeclRetTypeReq("invalid.meth.decl.ret.type.req"),
    InvalidModuleDirective("invalid.module.directive"),
    InvalidYield("invalid.yield"),
    IoException("io.exception"),
    LambdaBodyNeitherValueNorVoidCompatible("lambda.body.neither.value.nor.void.compatible"),
    LimitCode("limit.code"),
    LimitCodeTooLargeForTryStmt("limit.code.too.large.for.try.stmt"),
    LimitDimensions("limit.dimensions"),
    LimitLocals("limit.locals"),
    LimitParameters("limit.parameters"),
    LimitPool("limit.pool"),
    LimitPoolInClass("limit.pool.in.class"),
    LimitStack("limit.stack"),
    LimitString("limit.string"),
    LocalEnum("local.enum"),
    MalformedFpLit("malformed.fp.lit"),
    MatchBindingExists("match.binding.exists"),
    MethodDoesNotOverrideSuperclass("method.does.not.override.superclass"),
    MissingMethBodyOrDeclAbstract("missing.meth.body.or.decl.abstract"),
    MissingRetStmt("missing.ret.stmt"),
    ModuleDeclSbInModuleInfoJava("module.decl.sb.in.module-info.java"),
    ModuleNotFoundOnModuleSourcePath("module.not.found.on.module.source.path"),
    ModulesourcepathMustBeSpecifiedWithDashMOption("modulesourcepath.must.be.specified.with.dash.m.option"),
    MultipleValuesForModuleSourcePath("multiple.values.for.module.source.path"),
    NameReservedForInternalUse("name.reserved.for.internal.use"),
    NativeMethCantHaveBody("native.meth.cant.have.body"),
    NewNotAllowedInAnnotation("new.not.allowed.in.annotation"),
    NoAnnotationsOnDotClass("no.annotations.on.dot.class"),
    NoIntfExpectedHere("no.intf.expected.here"),
    NoMatchEntry("no.match.entry"),
    NoOpensUnlessStrong("no.opens.unless.strong"),
    NoOutputDir("no.output.dir"),
    NoPkgInModuleInfoJava("no.pkg.in.module-info.java"),
    NoSourceFiles("no.source.files"),
    NoSourceFilesClasses("no.source.files.classes"),
    NoSwitchExpression("no.switch.expression"),
    NoSwitchExpressionQualify("no.switch.expression.qualify"),
    NonSealedOrSealedExpected("non.sealed.or.sealed.expected"),
    NonSealedSealedOrFinalExpected("non.sealed.sealed.or.final.expected"),
    NotExhaustive("not.exhaustive"),
    NotExhaustiveStatement("not.exhaustive.statement"),
    NotInModuleOnModuleSourcePath("not.in.module.on.module.source.path"),
    NotStmt("not.stmt"),
    OutputDirMustBeSpecifiedWithDashMOption("output.dir.must.be.specified.with.dash.m.option"),
    PatternDominated("pattern.dominated"),
    PatternExpected("pattern.expected"),
    PkgAnnotationsSbInPackageInfoJava("pkg.annotations.sb.in.package-info.java"),
    PrematureEof("premature.eof"),
    PreviewWithoutSourceOrRelease("preview.without.source.or.release"),
    ProcCantCreateLoader("proc.cant.create.loader"),
    ProcNoService("proc.no.service"),
    ProcServiceProblem("proc.service.problem"),
    ProcessorpathNoProcessormodulepath("processorpath.no.processormodulepath"),
    ProfileBootclasspathConflict("profile.bootclasspath.conflict"),
    ReceiverParameterNotApplicableConstructorToplevelClass("receiver.parameter.not.applicable.constructor.toplevel.class"),
    RecordCannotDeclareInstanceFields("record.cannot.declare.instance.fields"),
    RecordCantDeclareFieldModifiers("record.cant.declare.field.modifiers"),
    RecordComponentAndOldArraySyntax("record.component.and.old.array.syntax"),
    RecordHeaderExpected("record.header.expected"),
    RecursiveCtorInvocation("recursive.ctor.invocation"),
    RepeatedAnnotationTarget("repeated.annotation.target"),
    RepeatedInterface("repeated.interface"),
    RepeatedModifier("repeated.modifier"),
    RetOutsideMeth("ret.outside.meth"),
    ReturnOutsideSwitchExpression("return.outside.switch.expression"),
    RuleCompletesNormally("rule.completes.normally"),
    SealedClassMustHaveSubclasses("sealed.class.must.have.subclasses"),
    SealedOrNonSealedLocalClassesNotAllowed("sealed.or.non.sealed.local.classes.not.allowed"),
    ServiceImplementationMustBeSubtypeOfServiceInterface("service.implementation.must.be.subtype.of.service.interface"),
    ServiceImplementationProviderReturnMustBeSubtypeOfServiceInterface("service.implementation.provider.return.must.be.subtype.of.service.interface"),
    SignatureDoesntMatchIntf("signature.doesnt.match.intf"),
    SignatureDoesntMatchSupertype("signature.doesnt.match.supertype"),
    SourcepathModulesourcepathConflict("sourcepath.modulesourcepath.conflict"),
    StaticDeclarationNotAllowedInInnerClasses("static.declaration.not.allowed.in.inner.classes"),
    StaticImpOnlyClassesAndInterfaces("static.imp.only.classes.and.interfaces"),
    StaticMethodsCannotBeAnnotatedWithOverride("static.methods.cannot.be.annotated.with.override"),
    StringConstReq("string.const.req"),
    SwitchCaseUnexpectedStatement("switch.case.unexpected.statement"),
    SwitchExpressionCompletesNormally("switch.expression.completes.normally"),
    SwitchExpressionEmpty("switch.expression.empty"),
    SwitchExpressionNoResultExpressions("switch.expression.no.result.expressions"),
    SwitchMixingCaseTypes("switch.mixing.case.types"),
    ThisAsIdentifier("this.as.identifier"),
    ThrowsNotAllowedInIntfAnnotation("throws.not.allowed.in.intf.annotation"),
    TooManyModules("too.many.modules"),
    TotalPatternAndDefault("total.pattern.and.default"),
    TryWithResourcesExprNeedsVar("try.with.resources.expr.needs.var"),
    TryWithoutCatchFinallyOrResourceDecls("try.without.catch.finally.or.resource.decls"),
    TwoClassLoaders1("two.class.loaders.1"),
    TypeVarCantBeDeref("type.var.cant.be.deref"),
    TypeVarMayNotBeFollowedByOtherBounds("type.var.may.not.be.followed.by.other.bounds"),
    TypeVarMoreThanOnce("type.var.more.than.once"),
    TypeVarMoreThanOnceInResult("type.var.more.than.once.in.result"),
    UnclosedCharLit("unclosed.char.lit"),
    UnclosedComment("unclosed.comment"),
    UnclosedStrLit("unclosed.str.lit"),
    UnclosedTextBlock("unclosed.text.block"),
    UnderscoreAsIdentifier("underscore.as.identifier"),
    UnderscoreAsIdentifierInLambda("underscore.as.identifier.in.lambda"),
    UnexpectedLambda("unexpected.lambda"),
    UnexpectedMref("unexpected.mref"),
    UnnamedPkgNotAllowedNamedModules("unnamed.pkg.not.allowed.named.modules"),
    UnreachableStmt("unreachable.stmt"),
    VarargsAndOldArraySyntax("varargs.and.old.array.syntax"),
    VarargsAndReceiver("varargs.and.receiver"),
    VarargsMustBeLast("varargs.must.be.last"),
    VariableNotAllowed("variable.not.allowed"),
    VoidNotAllowedHere("void.not.allowed.here"),
    WarningsAndWerror("warnings.and.werror"),
    WrongReceiver("wrong.receiver");

    companion object {
        internal fun get(code: String): JavacErrorType? =
            values().firstOrNull {
                it.code == if (code.startsWith("compiler.err.")) code.substring(13) else code
            }

        internal fun get(diagnostic: Diagnostic<out JavaFileObject>): JavacErrorType? =
            get(diagnostic.code)
    }
}