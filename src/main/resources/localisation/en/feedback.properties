# ================= #
# Dynamic Questions #
# ================= #
HowDeepCallStack_DistractorNumFunctionCalls = This the total number of function calls! The call stack handles nested function calls.
HowDeepCallStack_Correct = The maximum call stack depth is achieved from the sequence of nested function calls: %s.

HowManyArrayAllocations_DistractorTotalLength = This is the total length of the allocated arrays, not their number!
HowManyArrayAllocations_DistractorArrayParams = This is the number of array parameters the function %s takes, not the number of arrays allocated within the function!
HowManyArrayAllocations_Correct = The allocated arrays were: %s.

HowManyArrayReads_DistractorNumAllocated = This is the number of arrays which were allocated: %s.
HowManyArrayReads_DistractorWrites = This is the number of array writes. When you have %s, you're writing %s to the array %s's %s-th position.
HowManyArrayReads_DistractorLengthAccesses = This is the number of times an array's %s is accessed. These don't read any array positions!
HowManyArrayReads_DistractorLengthOfAllocated = This is the total length of every array allocated!
HowManyArrayReads_Correct = You read an array %s's %s-th position using %s.

HowManyArrayWrites_DistractorNumAllocated = This is the number of arrays which were allocated: %s.
HowManyArrayWrites_DistractorReads = This is the number of array reads. when you have %s, you're writing %s to the array %s's %s-th position.
HowManyArrayWrites_DistractorLengthAccesses = This is the number of times an array's %s is accessed. These don't write to any array positions!
HowManyArrayWrites_DistractorLengthOfAllocated = This is the total length of every array allocated!
HowManyArrayWrites_Correct = You write %s to an array %s's %s-th position using %s.

HowManyFunctionCalls_DistractorWrongProcedure = This is the number of calls to %s, not %s.
HowManyFunctionCalls_DistractorTotalAllProcedures = This is the number of total calls (to all functions), not just those to %s!

HowManyLoopIterations_DistractorOneMore = After the last iteration, the condition %s will still be evaluated (to %s) but the loop body won't be entered, so it does not count as an iteration.

HowManyVariableAssignments_Correct = Remember, an assignment to a variable %s is a statement like %s.
HowManyVariableAssignments_DistractorWrongVariable = This is the number of assignments of %s, not %s.

WhatArraySize_DistractorParameter = This is the length of the argument %s. Arguments do not count as being allocated within the function!
WhatArraySize_NoneOfTheAboveCorrect = Trick question: the function does not allocate any arrays!

WhatIsResult_DistractorReturnExpression = The result of the function call will be a value of type %s. %s is just a piece of code!
WhatIsResult_DistractorLastVariableValue = This is the last value of the variable %s, but not what is returned by the function call.

WhichReturnExecuted_DistractorRightProcedureWrongStmt = This statement is a possible return statement of %s, but not the one which executes when calling %s.
WhichReturnExecuted_DistractorWrongProcedure = This return statement belongs to the function %s, not %s!

WhichVariableValues_DistractorWrongVariable = These are the values taken by the variable %s, not by %s.


# ==================== #
# Structural Questions #
# ==================== #
HowManyLoops_DistractorBranches = This is the number of branch statements (%s) in the function %s, not loops!
HowManyLoops_DistractorBranchesAnonCall = This is the number of branch statements (%s) in the code, not loops!
HowManyLoops_DistractorDistinctLoops = This is the number of unique loop types (%s) present in the function %s. How many of each are there in total?
HowManyLoops_DistractorDistinctLoopsAnonCall = This is the number of unique loop types (%s) present in the code. How many of each are there in total?
HowManyLoops_DistractorGuardCondition = This question is asking about how many loops there are in the code, not how many iterations will happen if the code is executed!

HowManyParams_DistractorLocalVars = This is the number of the function's local variables, not of its parameters. the parameters are the values the function receives as input.
HowManyParams_ZeroCorrect = A function's parameters are written in the parenthesis after the function's name. In this case, the function %s has none!
HowManyParams_Correct = A function's parameters are written in parentheses after the function's name. In this case, the function %s has parameters %s.

HowManyVariables_ZeroCorrect = Local variables are variables declared within the function. In this case, there are none!
HowManyVariables_Correct = Local variables are variables declared within the function %s. In this case, we have: %s.
HowManyVariables_DistractorParameters = These are the parameters of the function %s, which appear in parentheses after the function's name: %s. These do not count as local variables!
HowManyVariables_DistractorParametersPlusVars = This number does include all local variables, but also the parameters of the function %s. Parameters do not count as local variables!

IsRecursive_YesCorrect = The function %s is recursive because it calls itself: %s.
IsRecursive_NoIncorrect = A function is called "recursive" if it calls itself.
IsRecursive_NoCorrect = The function %s does not call itself, so it is not recursive.
IsRecursive_YesIncorrect = A function is called "recursive" if it calls itself.

WhatVariables_DistractorLiterals = Values written directly (without being stored in a variable first) are called "literals", and do not count as variables.
WhatVariables_DistractorVarsAndLiterals = All the local variables of the function %s are included here, but so are some values which do not count as variables.
WhatVariables_DistractorVarTypes = These are the types of the variables, not their names!
WhatVariables_DistractorAllInScope = All the local variables of the function %s are included here, but so are some variables declared outside of it. Local variables are those declared within the function.
WhatVariables_DistractorParams = These are the parameters of the function %s. These do not count as local variables! Local variables are those declared within the function.
WhatVariables_DistractorMethodName = This is the name of the function %s. It's not a variable!
WhatVariables_DistractorMethodNameAndParams = This is the name of the function %s, along with its parameters. These do not count as local variables! Local variables are those declared within the function.
WhatVariables_DistractorNameAndAllInScope = This is the name of the function %s, along with all of its local variables, but also some declared outside the function. Local variables are those declared within the function.
WhatVariables_DistractorNameAndVars = The name of the function does not count as a variable.
WhatVariables_Correct = A variable is declared using, for example, %s, and a function's local variables are those declared inside the function.
WhatVariables_CorrectAnonCall = A variable is declared using, for example, %s.

WhichFixedVariables_DistractorParams = These are the parameters of the function %s. These do not count as variables!
WhichFixedVariables_DistractorLiterals = Values written directly (without being stored in a variable first) are called "literals", and do not count as variables.
WhichFixedVariables_DistractorNotFixed = These are precisely the variables which are not fixed! a fixed variable is one whose value is never changed after being declared. Here, for example, the statement %s changes the value of the variable %s, so it is not fixed.
WhichFixedVariables_DistractorAllLocal = All the fixed-value variables are included here, but so are some which are not fixed! a fixed variable is one whose value is never changed after being declared. Here, for example, the statement %s changes the value of the variable %s, so it is not fixed.
WhichFixedVariables_Correct = The variables %s are initialised, but their value never changes, so they are fixed.

WhichFunctionDependencies_DistractorControlStructures = Statements like %s are called "control structures". They don't count as functions!
WhichFunctionDependencies_DistractorNamesAndControlStructures = Statements like %s are called "control structures". They don't count as functions!
WhichFunctionDependencies_DistractorReturnStmts = Return statements (%s) end a function's execution, but they themselves do not count as functions.
WhichFunctionDependencies_DistractorControlsAndReturns = Statements like %s are called "control structures", and return statements (%s) end a function's execution. Neither count as functions!
WhichFunctionDependencies_DistractorTypes = Data types are not functions!
WhichFunctionDependencies_DistractorModifiers = Modifiers (e.g. %s, %s) are not functions!
WhichFunctionDependencies_Correct = A function depends on the other functions which it calls.

WhichParametersMultipleChoice_DistractorParamTypes = This is a parameter's type. Just like when declaring variables, you write the name after the type.
WhichParametersMultipleChoice_DistractorLocalVars = This is a variable of the function %s. a function's parameters are written in parentheses after its name.
WhichParametersMultipleChoice_DistractorLocalVarTypes = This is the type of a variable of the function %s. a function's parameters are written in parentheses after its name.
WhichParametersMultipleChoice_NoneCorrect = A function's parameters are written in parentheses after its name, so this was a trick question: %s doesn't have any!

WhichParametersSingleChoice_DistractorParamAndName = A function's name is not a parameter!
WhichParametersSingleChoice_DistractorParamTypes = These are the parameters' types. just like when declaring variables, you write the name after the type.
WhichParametersSingleChoice_DistractorLocalVars = These are the function %s's variables, not its parameters. A function's parameters are written in parentheses after its name.
WhichParametersSingleChoice_DistractorLocalVarTypes = These are the types of the function %s's local variables. A function's parameters are written in parentheses after its name.
WhichParametersSingleChoice_NoneCorrect = A function's parameters are written in parentheses after its name, so this was a trick question: %s doesn't have any!

WhichParameterTypes_DistractorParameters = These are the actual parameters of the function %s, not their types. Just like when declaring variables, you write the name after the type.
WhichParameterTypes_DistractorLocalVars = These are the function %s's variables, not its parameters. A function's parameters are written in parentheses after its name.
WhichParameterTypes_DistractorLocalVarTypes = These are the types of the function %s's variables, not of its parameters. A function's parameters are written in parentheses after its name.
WhichParameterTypes_DistractorParamTypesAndReturnType = The function %s's return type (%s) does not count as a parameter type.
WhichParameterTypes_NoneCorrect = A function's parameters are written in parentheses after its name, so this was a trick question: %s doesn't have any!

WhichReturnType_DistractorName = This is the function's name. It always shows up after the function's return type!
WhichReturnType_Correct = A function's return type always shows up right before its name.